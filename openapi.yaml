openapi: 3.0.1
info:
  title: Fan Control Backend API
  version: 1.0.0
paths:
  /frontend/config:
    get:
      summary: Get frontend configuration
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentConfig'
    post:
      summary: Save frontend configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistentConfig'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentConfig'
  /outdoor:
    get:
      summary: Get outdoor sensor data
      parameters:
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/DateRangeParameterStart'
        - $ref: '#/components/parameters/DateRangeParameterEnd'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutdoorFetchResponse'
    post:
      summary: Save outdoor sensor data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutdoorSensorRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutdoorSensorResponse'
  /indoor:
    get:
      summary: Get indoor sensor data
      parameters:
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/DateRangeParameterStart'
        - $ref: '#/components/parameters/DateRangeParameterEnd'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndoorFetchResponse'
    post:
      summary: Save indoor sensor data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndoorSensorRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndoorSensorResponse'
  /weather:
    get:
      summary: Gets current weather & forecast data
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherResponse'
  /switchState:
    get:
      summary: Get the current state of the fan (on/off)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: boolean
                    description: If the fan is on or off
                required: [state]
components:
  schemas:
    PersistentConfig:
      type: object
      properties:
        pollingRateSensorOutside:
          type: integer
          format: int32
          description: Polling rate for the outdoor sensor in milliseconds
        pollingRateSensorInside:
          type: integer
          format: int32
          description: Polling rate for the indoor sensor in milliseconds
        pollingRateWeb:
          type: integer
          format: int32
          description: Polling rate for the web UI in milliseconds
        ignoreWindow:
          type: boolean
          description: Flag to ignore window state for fan control
        darkMode:
          type: boolean
          description: Flag to ignore window state for fan control
        zipCode:
          type: string
          description: The ZIP code for weather display
        hysteresisOffset:
          type: number
          description: > 
            When switching fan enablement, only consider enabling if the absolute humidity difference is greater than the configured value.
        nightModeConfig:
          $ref: '#/components/schemas/NightModeConfig'
      required: [pollingRateWeb, ignoreWindow, darkMode, zipCode, nightModeConfig]
    NightModeConfig:
      type: object
      properties:
        startHour:
          type: integer
          format: int32
          description: Start hour of the night mode
        endHour:
          type: integer
          format: int32
          description: End hour of the night mode
        maxDutyCycle:
          type: integer
          format: int32
          description: Maximum fan duty cycle for night mode

    OutdoorSensorRequest:
      type: object
      properties:
        temperature:
          type: number
          format: double
          description: Temperature from the outdoor sensor
        relativeHumidity:
          type: integer
          format: double
          description: Relative humidity from the outdoor sensor
        battery:
          type: number
          format: double
          description: Current battery level
    OutdoorSensorResponse:
      type: object
      properties:
        sleepDurationMilliseconds:
          type: integer
          format: int32
          description: Sleep duration in milliseconds for the outdoor sensor
    IndoorSensorRequest:
      type: object
      properties:
        temperature:
          type: number
          format: double
          description: Temperature from the indoor sensor
        relativeHumidity:
          type: integer
          format: double
          description: Relative humidity from the indoor sensor
        windowOpen:
          type: boolean
          description: Window open state from the indoor sensor
    IndoorSensorResponse:
      type: object
      properties:
        sleepDurationMilliseconds:
          type: integer
          format: int32
          description: Sleep duration in milliseconds for the indoor sensor
        fanDutyCycle:
          type: integer
          format: int32
          description: Fan duty cycle for the indoor sensor
    IndoorFetchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IndoorFetchResponse.Measurement'
    OutdoorFetchResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OutdoorFetchResponse.Measurement'
    IndoorFetchResponse.Measurement:
      type: object
      properties:
        date:
          type: string
          description: Date of the measurement
        temperature:
          type: number
          format: double
          description: Temperature from the indoor sensor
        relativeHumidity:
          type: integer
          format: double
          description: Relative humidity from the indoor sensor
        absoluteHumidity:
          type: number
          format: double
          description: Absolute humidity calculated from temperature and relative humidity
        windowOpen:
          type: boolean
          description: Window open state from the indoor sensor
    OutdoorFetchResponse.Measurement:
      type: object
      properties:
        date:
          type: string
          description: Date of the measurement
        temperature:
          type: number
          format: double
          description: Temperature from the outdoor sensor
        relativeHumidity:
          type: integer
          format: double
          description: Relative humidity from the outdoor sensor
        absoluteHumidity:
          type: number
          format: double
          description: Absolute humidity calculated from temperature and relative humidity
        battery:
          type: number
          format: double
          description: Battery level
    Coord:
      type: "object"
      properties:
        lon:
          type: "number"
          format: "double"
        lat:
          type: "number"
          format: "double"
    Weather:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        main:
          type: "string"
        description:
          type: "string"
        icon:
          type: "string"
    WeatherMain:
      type: "object"
      properties:
        temp:
          type: "number"
          format: "double"
        feels_like:
          type: "number"
          format: "double"
        temp_min:
          type: "number"
          format: "double"
        temp_max:
          type: "number"
          format: "double"
        pressure:
          type: "integer"
          format: "int32"
        humidity:
          type: "integer"
          format: "int32"
        sea_level:
          type: "integer"
          format: "int32"
        grnd_level:
          type: "integer"
          format: "int32"
    Wind:
      type: "object"
      properties:
        speed:
          type: "number"
          format: "double"
        deg:
          type: "integer"
          format: "int32"
        gust:
          type: "number"
          format: "double"
    Rain:
      type: "object"
      properties:
        "1h":
          type: "number"
          format: "double"
    Clouds:
      type: "object"
      properties:
        all:
          type: "integer"
          format: "int32"
    WeatherSys:
      type: "object"
      properties:
        type:
          type: "integer"
          format: "int32"
        id:
          type: "integer"
          format: "int32"
        country:
          type: "string"
        sunrise:
          type: "integer"
          format: "int64"
        sunset:
          type: "integer"
          format: "int64"
    WeatherData:
      type: "object"
      properties:
        coord:
          $ref: "#/components/schemas/Coord"
        weather:
          type: "array"
          items:
            $ref: "#/components/schemas/Weather"
        base:
          type: "string"
        main:
          $ref: "#/components/schemas/WeatherMain"
        visibility:
          type: "integer"
          format: "int32"
        wind:
          $ref: "#/components/schemas/Wind"
        rain:
          $ref: "#/components/schemas/Rain"
        clouds:
          $ref: "#/components/schemas/Clouds"
        dt:
          type: "integer"
          format: "int64"
        sys:
          $ref: "#/components/schemas/WeatherSys"
        timezone:
          type: "integer"
          format: "int32"
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        cod:
          type: "integer"
          format: "int32"
    ForecastSys:
      type: "object"
      properties:
        pod:
          type: "string"
    WeatherItem:
      type: "object"
      properties:
        dt:
          type: "integer"
          format: "int64"
        main:
          $ref: "#/components/schemas/WeatherMain"
        weather:
          type: "array"
          items:
            $ref: "#/components/schemas/Weather"
        clouds:
          $ref: "#/components/schemas/Clouds"
        wind:
          $ref: "#/components/schemas/Wind"
        visibility:
          type: "integer"
          format: "int32"
        pop:
          type: "number"
          format: "double"
        rain:
          $ref: "#/components/schemas/Rain"
        sys:
          $ref: "#/components/schemas/ForecastSys"
        dt_txt:
          type: "string"
    City:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        coord:
          $ref: "#/components/schemas/Coord"
        country:
          type: "string"
        population:
          type: "integer"
          format: "int32"
        timezone:
          type: "integer"
          format: "int32"
        sunrise:
          type: "integer"
          format: "int64"
        sunset:
          type: "integer"
          format: "int64"
    ForecastData:
      type: "object"
      properties:
        cod:
          type: "string"
        message:
          type: "integer"
          format: "int32"
        cnt:
          type: "integer"
          format: "int32"
        list:
          type: "array"
          items:
            $ref: "#/components/schemas/WeatherItem"
        city:
          $ref: "#/components/schemas/City"
    WeatherResponse:
      type: "object"
      properties:
        current:
          $ref: "#/components/schemas/WeatherData"
        forecast:
          $ref: "#/components/schemas/ForecastData"
  parameters:
    LimitParameter:
      name: limit
      in: query
      description: Maximum number of data points to retrieve
      required: false
      schema:
        type: integer
        format: int32
        default: 1000
    DateRangeParameterStart:
      name: start
      in: query
      description: Start date and time for data retrieval (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date-time
    DateRangeParameterEnd:
      name: end
      in: query
      description: End date and time for data retrieval (ISO 8601 format)
      required: false
      schema:
        type: string
        format: date-time